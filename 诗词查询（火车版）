<template>
  <div class="poetry-system">
    <!-- 增强版搜索头 -->
    <header class="search-header">
      <div class="header-content">
        <h1><i class="icon-poetry"></i> 中华诗词智能检索系统</h1>
        <div class="header-actions">
          <el-button circle @click="showHistory" class="action-button">
            <el-icon>
              <Clock />
            </el-icon>
          </el-button>
          <el-button circle @click="showFavorites" class="action-button">
            <el-icon>
              <StarFilled />
            </el-icon>
          </el-button>
        </div>
      </div>

      <div class="search-toolbar">
        <el-input
          v-model="searchQuery"
          placeholder="输入作者/《标题》/诗句/关键词"
          @keyup.enter="handleSearch"
          class="smart-input"
          clearable
        >
          <template #prefix>
            <el-icon>
              <Search />
            </el-icon>
          </template>
        </el-input>
        <el-button type="primary" @click="handleSearch" :icon="Search" class="search-button">
          智能检索
        </el-button>
        <el-button type="success" @click="randomPoetry" :icon="MagicStick" class="random-button">
          随机推荐
        </el-button>
      </div>
    </header>

    <!-- 增强结果展示区 -->
    <section class="result-container">
      <el-tabs v-model="activeTab">
        <el-tab-pane label="作品列表" name="list">
          <PoetryList :data="searchResults" @play="playAudio" @favorite="toggleFavorite" />
        </el-tab-pane>
        <el-tab-pane label="作者专题" name="author" v-if="authorData">
          <AuthorProfile :data="authorData" />
        </el-tab-pane>
        <el-tab-pane label="我的收藏" name="favorites" v-if="favorites.length"> 
          <PoetryList :data="favorites" @play="playAudio" @favorite="toggleFavorite" />
        </el-tab-pane>
      </el-tabs>

      <!-- 诗词详情浮层 -->
      <el-dialog v-model="detailVisible" width="60%">
        <PoetryDetail :data="currentPoetry" />
      </el-dialog>
    </section>

    <!-- 使用CSS绘制的背景装饰元素（无需图片） -->
    <div class="decoration-cloud"></div>
    <div class="ink-stroke"></div>
  </div>
</template>

<script>
import { Search, Clock, StarFilled, MagicStick } from '@element-plus/icons-vue'
import { useSpeechSynthesis } from '@vueuse/core'

export default {
  components: { Search, Clock, StarFilled, MagicStick },
  data() {
    return {
      searchQuery: '',
      activeTab: 'list',
      searchResults: [],
      authorData: null,
      favorites: [],
      detailVisible: false,
      currentPoetry: null,
      loading: false,
      searchHistory: []
    }
  },
  mounted() {
    this.applyTimeTheme(15, 53) // 当前时间15:53
  },
  methods: {
    applyTimeTheme(hours, minutes) {
      const timeRatio = (hours * 60 + minutes) / 1440
      document.documentElement.style.setProperty(
        '--primary-color',
        `hsl(${180 - timeRatio * 30}, 60%, 40%)`
      )
      document.documentElement.style.setProperty(
        '--bg-gradient',
        `linear-gradient(${135 + timeRatio * 60}deg, 
          hsl(42, 80%, ${90 - timeRatio * 30}%) 0%, 
          hsl(42, 60%, ${80 - timeRatio * 40}%) 100%)`
      )
    },
    async handleSearch() {
      if (!this.searchQuery.trim()) {
        this.$message.warning('请输入搜索内容')
        return
      }

      this.loading = true
      try {
        const mode = this.detectSearchMode()
        let mockData

        // 模拟后端数据
        if (mode === 'author') {
          mockData = {
            type: 'author',
            payload: {
              name: this.searchQuery,
              poems: [
                { title: '静夜思', content: '床前明月光，疑是地上霜。' },
                { title: '将进酒', content: '君不见黄河之水天上来，奔流到海不复回。' }
              ]
            }
          }
        } else if (mode === 'title') {
          mockData = {
            type: 'content',
            results: [
              { title: '静夜思', author: '李白', content: '床前明月光，疑是地上霜。' }
            ]
          }
        } else if (mode === 'content') {
          mockData = {
            type: 'content',
            results: [
              { title: '静夜思', author: '李白', content: '床前明月光，疑是地上霜。' },
              { title: '春晓', author: '孟浩然', content: '春眠不觉晓，处处闻啼鸟。' }
            ]
          }
        }

        if (mockData.type === 'author') {
          this.authorData = mockData.payload
          this.activeTab = 'author'
        } else {
          this.searchResults = mockData.results
        }
      } catch (error) {
        this.$message.error(`搜索失败: ${error.message}`)
      } finally {
        this.loading = false
      }
    },
    detectSearchMode() {
      if (/^[\u4e00-\u9fa5]{2,4}$/.test(this.searchQuery)) return 'author'
      if (/^《.+》$/.test(this.searchQuery)) return 'title'
      return 'content'
    },
    randomPoetry() {
      this.loading = true
      // 模拟API请求
      setTimeout(() => {
        this.searchResults = [{
          title: '暮春归故山草堂',
          author: '钱起',
          content: '谷口春残黄鸟稀，辛夷花尽杏花飞。始怜幽竹山窗下，不改清阴待我归。'
        }]
        this.activeTab = 'list'
        this.loading = false
      }, 800)
    },
    playAudio(content) {
      const { speak } = useSpeechSynthesis()
      speak({
        text: content,
        lang: 'zh-CN',
        rate: 0.9
      })
    },
    toggleFavorite(item) {
      const index = this.favorites.findIndex(f => f.title === item.title)
      if (index > -1) {
        this.favorites.splice(index, 1)
      } else {
        this.favorites.push(item)
      }
    },
    showHistory() {
      this.$message.info('显示搜索历史功能')
    },
    showFavorites() {
      this.activeTab = 'favorites'
    },
    showPoetryDetail(item) {
      this.currentPoetry = item
      this.detailVisible = true
    }
  }
}
</script>

<style scoped>
:root {
  --primary-color: #2c7873;
  --secondary-color: #6fb98f;
  --accent-color: #e8c547;
  --text-dark: #2b2b2b;
  --text-light: #f5f5f5;
  --bg-gradient: linear-gradient(135deg, #f8f3e6 0%, #e8e1d1 100%);
}

.poetry-system {
  max-width: 1200px;
  margin: 2rem auto;
  padding: 2rem;
  background: var(--bg-gradient);
  border-radius: 16px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  position: relative;
  overflow: hidden;
  font-family: "Noto Serif SC", serif;
  min-height: calc(100vh - 4rem);
}

.poetry-system::before {
  content: "";
  position: absolute;
  inset: 0;
  border: 12px solid transparent;
  background: linear-gradient(135deg, 
    rgba(44, 120, 115, 0.1) 0%, 
    rgba(111, 185, 143, 0.1) 50%, 
    rgba(232, 197, 71, 0.1) 100%);
  border-radius: 16px;
  pointer-events: none;
  z-index: 0;
}

.search-header {
  background: linear-gradient(to right,
      rgba(44, 120, 115, 0.9),
      rgba(111, 185, 143, 0.7));
  padding: 2rem;
  border-radius: 12px;
  margin-bottom: 2rem;
  position: relative;
  overflow: hidden;
  color: var(--text-light);
  z-index: 1;
}

.search-header::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: 
    radial-gradient(circle at 20% 30%, 
      transparent 0%, 
      rgba(0,0,0,0.1) 100%);
  mix-blend-mode: overlay;
  opacity: 0.3;
}

.header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.search-toolbar {
  display: flex;
  gap: 1rem;
  align-items: center;
  margin-top: 1.5rem;
}

.smart-input {
  flex: 1;
  max-width: 600px;
}

.search-button,
.random-button {
  padding: 12px 24px;
  font-size: 16px;
}

.action-button {
  background-color: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.3);
  color: white;
  transition: all 0.3s ease;
}

.action-button:hover {
  background-color: rgba(255, 255, 255, 0.2);
  transform: scale(1.1);
}

.result-container {
  position: relative;
  z-index: 1;
  background: rgba(255, 255, 255, 0.85);
  border-radius: 12px;
  padding: 1.5rem;
  backdrop-filter: blur(5px);
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
}

.decoration-cloud {
  position: fixed;
  width: 300px;
  height: 180px;
  background: 
    radial-gradient(circle at 30% 60%, 
      rgba(255,255,255,0.8) 10%, 
      transparent 25%);
  right: -50px;
  top: 20%;
  opacity: 0.8;
  z-index: -1;
  filter: drop-shadow(0 10px 15px rgba(0, 0, 0, 0.1));
  animation:
    float 8s ease-in-out infinite,
    drift 60s linear infinite alternate;
}

.ink-stroke {
  position: fixed;
  width: 400px;
  height: 400px;
  background: 
    linear-gradient(45deg, 
      transparent 65%, 
      var(--primary-color) 65%, 
      var(--primary-color) 70%, 
      transparent 70%);
  right: -100px;
  top: 30%;
  z-index: -2;
  opacity: 0.05;
  animation:
    rotate 180s linear infinite,
    fade 20s ease-in-out infinite alternate;
}

@keyframes float {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-20px); }
}

@keyframes drift {
  from { left: -10%; }
  to { left: 110%; }
}

@keyframes rotate {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

@keyframes shine {
  0% { transform: translateX(-100%) rotate(45deg); }
  100% { transform: translateX(100%) rotate(45deg); }
}

@media (max-width: 768px) {
  .poetry-system {
    padding: 1rem;
    margin: 0;
    border-radius: 0;
    min-height: 100vh;
  }

  .search-toolbar {
    grid-template-columns: 1fr;
  }

  .decoration-cloud {
    width: 150px;
    height: 90px;
    opacity: 0.4;
  }

  .ink-stroke {
    display: none;
  }
}
</style>
